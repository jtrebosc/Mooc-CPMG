;halfecho.jt
;checked AVIII+topspin 3.0

; Hahn-Echo experiment
; to be used in MAS experiments, echo delay is set to be an integer number
; of rotor periods
; acquisition starts on top of echo
; for static experiments enter cnst31 = 1e6 and set l1 to desired echo delay in us
; this pulse program can be used to determine 90 and 180 degree selective pulses
; used in MQMAS experiments (mp3q...)
; CAUTION : p3 and p4 are used for subsequent use in MQMAS experiments
; modified 30/01/2006 : added hardEcho ZGOPTN for extra phase cycling for hard pulses echo
; modified 07/10/2010 : code cleanning, code check for ZGOPTNS on AVIII topspin 3.0


;ZGOPTNS : -DPRESAT -Dhardecho -DdecF2echo -DdecF2aq -DT1 -Dp3opt -D_HS
; PRESAT to use presaturation before echo
; hardEcho to use 64 phases cycling (+1-> -1 pathway)
; decF2echo add F2 decoupling during echo delays (d6,d7)
; decF2aq add F2 decoupling during acquisition
; T1 use a vd list for T1 measurement using an echo sequence (defines PRESAT automatically)
; p3opt disable p4=cnst0*p3 relation : allow p3,p4 independant optimisation
; _HS : add HyperSecant/DFS pre pulse to enhance CT signal of quadrupolar spins.

;ns : 16 * n (or 64 if -DhardEcho)
;d1 : recycle delay
;d6 : echo delay (calculated)
;pl1 : =119 dB, not used
;pl21 : RF power level
;p3 : 90 degree pulse
;p4 : 180 degree pulse
;cnst31 : =MAS spin rate (or =1e6 for static)
;cnst0 factor for second pulse
;l1 : # of rotor cycles (or tau in us)
;l2 : JRES # rotor cycles step
;ns : 16*n

;$COMMENT=hahn echo with useful features
;$CLASS=Solids
;$DIM=1D-2D
;$TYPE=
;$SUBTYPE=
;$OWNER=Trebosc

define delay showInASED
"showInASED=1u"
#ifdef T1
#ifndef PRESAT
#define PRESAT
define list<delay> vd_list=<$VDLIST>
#endif
#endif


#ifdef decF2aq
#define decF2
#define decF2aqON cpds2:f2
#else
#define decF2aqON
#endif

#ifdef decF2echo
#define decF2
#define decF2echoON cpds2:f2
#else
#define decF2echoON
#endif

#ifdef decF2
#define tppm
#include "decouple.incl"
#define decF2off do:f2
#else
#define decF2off 
#endif

#include "presat2.incl"
#ifndef PRESAT
#undef PRESAT1
#define PRESAT1(f1,lab)
#define presatPH
#endif

#ifdef _HS
;p8 HS pulse length
;cnst3 : (ns) time resolution of shape sp1
;sp8 HS power
;spoffs8 HS offset (spoffs1 < 1/cnst3)
;"cnst3=500000.0/spoffs1" 
;cnst1 : DFS (in kHz) Startfrequency of sweep
;cnst2 : DFS (in kHz) Endfrequency of sweep
"showInASED=cnst3+cnst2+cnst1"
#endif


"l5=0"

#ifndef p3opt
"p4=p3*cnst0"
#endif

"d6=((1s*(l1+l2*l5))/cnst31)-(p3/2)-(p4/2)"
"d7=((1s*(l1+l2*l5))/cnst31)-(p4/2)-de-1.0u"

"d0=d6"
"inf1=2s*l2/cnst31"


1 ze
goto 2
"showInASED=0"

2 30m decF2off

"d6=((1s*(l1+l2*l5))/cnst31)-(p3/2)-(p4/2)"
"d7=((1s*(l1+l2*l5))/cnst31)-(p4/2)-de-1.0u"

#ifdef T1
d1
#endif
presatDelayList.res ; resets the presat delay list
 PRESAT1(f1,lab)

#ifdef T1
  vd_list
#else
  
  d1 
#endif

#ifdef _HS
  (p8:sp8 ph0):f1
#endif

  10u pl21:f1
1u decF2echoON ;fq=cnst10:f1
  (p3 ph1):f1
  d6 
  (p4 ph2):f1
  d7
;1u fq=0:f1
  1u decF2off
  go=2 ph31 decF2aqON
  10u decF2off
#ifdef T1
  30m mc #0 to 2 F1QF(vd_list.inc) 
#else
  30m mc #0 to 2 F1QF(iu5)
#endif

exit

ph0=0
ph30=0
presatPH ; defines ph20 and ph19=0
#ifndef hardEcho
ph1=0 1 2 3
ph2=0 0 0 0 1 1 1 1 2 2 2 2 3 3 3 3
ph31=0 3 2 1 2 1 0 3
#endif

#ifdef hardEcho
ph1= (8) 0 1 2 3 4 5 6 7
ph2= (8) {{0}*8}^1^2^3^4^5^6^7
ph31=(8) {0 7 6 5 4 3 2 1}^2^4^6
#endif
